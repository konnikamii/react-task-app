/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AppRouteImport } from './routes/app/route'

// Create Virtual Routes

const TosLazyImport = createFileRoute('/tos')()
const RegisterLazyImport = createFileRoute('/register')()
const PrivacyLazyImport = createFileRoute('/privacy')()
const LoginLazyImport = createFileRoute('/login')()
const ContactLazyImport = createFileRoute('/contact')()
const IndexLazyImport = createFileRoute('/')()
const AppIndexLazyImport = createFileRoute('/app/')()
const AppUserIndexLazyImport = createFileRoute('/app/user/')()
const AppTasksIndexLazyImport = createFileRoute('/app/tasks/')()
const AppDashboardIndexLazyImport = createFileRoute('/app/dashboard/')()
const AppTasksTaskidLazyImport = createFileRoute('/app/tasks/$taskid')()

// Create/Update Routes

const TosLazyRoute = TosLazyImport.update({
  id: '/tos',
  path: '/tos',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tos.lazy').then((d) => d.Route))

const RegisterLazyRoute = RegisterLazyImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/register.lazy').then((d) => d.Route))

const PrivacyLazyRoute = PrivacyLazyImport.update({
  id: '/privacy',
  path: '/privacy',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/privacy.lazy').then((d) => d.Route))

const LoginLazyRoute = LoginLazyImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/login.lazy').then((d) => d.Route))

const ContactLazyRoute = ContactLazyImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/contact.lazy').then((d) => d.Route))

const AppRouteRoute = AppRouteImport.update({
  id: '/app',
  path: '/app',
  getParentRoute: () => rootRoute,
} as any)

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const AppIndexLazyRoute = AppIndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() => import('./routes/app/index.lazy').then((d) => d.Route))

const AppUserIndexLazyRoute = AppUserIndexLazyImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/user/index.lazy').then((d) => d.Route),
)

const AppTasksIndexLazyRoute = AppTasksIndexLazyImport.update({
  id: '/tasks/',
  path: '/tasks/',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tasks/index.lazy').then((d) => d.Route),
)

const AppDashboardIndexLazyRoute = AppDashboardIndexLazyImport.update({
  id: '/dashboard/',
  path: '/dashboard/',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/dashboard/index.lazy').then((d) => d.Route),
)

const AppTasksTaskidLazyRoute = AppTasksTaskidLazyImport.update({
  id: '/tasks/$taskid',
  path: '/tasks/$taskid',
  getParentRoute: () => AppRouteRoute,
} as any).lazy(() =>
  import('./routes/app/tasks/$taskid.lazy').then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/app': {
      id: '/app'
      path: '/app'
      fullPath: '/app'
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactLazyImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginLazyImport
      parentRoute: typeof rootRoute
    }
    '/privacy': {
      id: '/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof PrivacyLazyImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterLazyImport
      parentRoute: typeof rootRoute
    }
    '/tos': {
      id: '/tos'
      path: '/tos'
      fullPath: '/tos'
      preLoaderRoute: typeof TosLazyImport
      parentRoute: typeof rootRoute
    }
    '/app/': {
      id: '/app/'
      path: '/'
      fullPath: '/app/'
      preLoaderRoute: typeof AppIndexLazyImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tasks/$taskid': {
      id: '/app/tasks/$taskid'
      path: '/tasks/$taskid'
      fullPath: '/app/tasks/$taskid'
      preLoaderRoute: typeof AppTasksTaskidLazyImport
      parentRoute: typeof AppRouteImport
    }
    '/app/dashboard/': {
      id: '/app/dashboard/'
      path: '/dashboard'
      fullPath: '/app/dashboard'
      preLoaderRoute: typeof AppDashboardIndexLazyImport
      parentRoute: typeof AppRouteImport
    }
    '/app/tasks/': {
      id: '/app/tasks/'
      path: '/tasks'
      fullPath: '/app/tasks'
      preLoaderRoute: typeof AppTasksIndexLazyImport
      parentRoute: typeof AppRouteImport
    }
    '/app/user/': {
      id: '/app/user/'
      path: '/user'
      fullPath: '/app/user'
      preLoaderRoute: typeof AppUserIndexLazyImport
      parentRoute: typeof AppRouteImport
    }
  }
}

// Create and export the route tree

interface AppRouteRouteChildren {
  AppIndexLazyRoute: typeof AppIndexLazyRoute
  AppTasksTaskidLazyRoute: typeof AppTasksTaskidLazyRoute
  AppDashboardIndexLazyRoute: typeof AppDashboardIndexLazyRoute
  AppTasksIndexLazyRoute: typeof AppTasksIndexLazyRoute
  AppUserIndexLazyRoute: typeof AppUserIndexLazyRoute
}

const AppRouteRouteChildren: AppRouteRouteChildren = {
  AppIndexLazyRoute: AppIndexLazyRoute,
  AppTasksTaskidLazyRoute: AppTasksTaskidLazyRoute,
  AppDashboardIndexLazyRoute: AppDashboardIndexLazyRoute,
  AppTasksIndexLazyRoute: AppTasksIndexLazyRoute,
  AppUserIndexLazyRoute: AppUserIndexLazyRoute,
}

const AppRouteRouteWithChildren = AppRouteRoute._addFileChildren(
  AppRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/app': typeof AppRouteRouteWithChildren
  '/contact': typeof ContactLazyRoute
  '/login': typeof LoginLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tos': typeof TosLazyRoute
  '/app/': typeof AppIndexLazyRoute
  '/app/tasks/$taskid': typeof AppTasksTaskidLazyRoute
  '/app/dashboard': typeof AppDashboardIndexLazyRoute
  '/app/tasks': typeof AppTasksIndexLazyRoute
  '/app/user': typeof AppUserIndexLazyRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/contact': typeof ContactLazyRoute
  '/login': typeof LoginLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tos': typeof TosLazyRoute
  '/app': typeof AppIndexLazyRoute
  '/app/tasks/$taskid': typeof AppTasksTaskidLazyRoute
  '/app/dashboard': typeof AppDashboardIndexLazyRoute
  '/app/tasks': typeof AppTasksIndexLazyRoute
  '/app/user': typeof AppUserIndexLazyRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/app': typeof AppRouteRouteWithChildren
  '/contact': typeof ContactLazyRoute
  '/login': typeof LoginLazyRoute
  '/privacy': typeof PrivacyLazyRoute
  '/register': typeof RegisterLazyRoute
  '/tos': typeof TosLazyRoute
  '/app/': typeof AppIndexLazyRoute
  '/app/tasks/$taskid': typeof AppTasksTaskidLazyRoute
  '/app/dashboard/': typeof AppDashboardIndexLazyRoute
  '/app/tasks/': typeof AppTasksIndexLazyRoute
  '/app/user/': typeof AppUserIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/app'
    | '/contact'
    | '/login'
    | '/privacy'
    | '/register'
    | '/tos'
    | '/app/'
    | '/app/tasks/$taskid'
    | '/app/dashboard'
    | '/app/tasks'
    | '/app/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/contact'
    | '/login'
    | '/privacy'
    | '/register'
    | '/tos'
    | '/app'
    | '/app/tasks/$taskid'
    | '/app/dashboard'
    | '/app/tasks'
    | '/app/user'
  id:
    | '__root__'
    | '/'
    | '/app'
    | '/contact'
    | '/login'
    | '/privacy'
    | '/register'
    | '/tos'
    | '/app/'
    | '/app/tasks/$taskid'
    | '/app/dashboard/'
    | '/app/tasks/'
    | '/app/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AppRouteRoute: typeof AppRouteRouteWithChildren
  ContactLazyRoute: typeof ContactLazyRoute
  LoginLazyRoute: typeof LoginLazyRoute
  PrivacyLazyRoute: typeof PrivacyLazyRoute
  RegisterLazyRoute: typeof RegisterLazyRoute
  TosLazyRoute: typeof TosLazyRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AppRouteRoute: AppRouteRouteWithChildren,
  ContactLazyRoute: ContactLazyRoute,
  LoginLazyRoute: LoginLazyRoute,
  PrivacyLazyRoute: PrivacyLazyRoute,
  RegisterLazyRoute: RegisterLazyRoute,
  TosLazyRoute: TosLazyRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/app",
        "/contact",
        "/login",
        "/privacy",
        "/register",
        "/tos"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/app": {
      "filePath": "app/route.tsx",
      "children": [
        "/app/",
        "/app/tasks/$taskid",
        "/app/dashboard/",
        "/app/tasks/",
        "/app/user/"
      ]
    },
    "/contact": {
      "filePath": "contact.lazy.tsx"
    },
    "/login": {
      "filePath": "login.lazy.tsx"
    },
    "/privacy": {
      "filePath": "privacy.lazy.tsx"
    },
    "/register": {
      "filePath": "register.lazy.tsx"
    },
    "/tos": {
      "filePath": "tos.lazy.tsx"
    },
    "/app/": {
      "filePath": "app/index.lazy.tsx",
      "parent": "/app"
    },
    "/app/tasks/$taskid": {
      "filePath": "app/tasks/$taskid.lazy.tsx",
      "parent": "/app"
    },
    "/app/dashboard/": {
      "filePath": "app/dashboard/index.lazy.tsx",
      "parent": "/app"
    },
    "/app/tasks/": {
      "filePath": "app/tasks/index.lazy.tsx",
      "parent": "/app"
    },
    "/app/user/": {
      "filePath": "app/user/index.lazy.tsx",
      "parent": "/app"
    }
  }
}
ROUTE_MANIFEST_END */
